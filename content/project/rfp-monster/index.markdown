---
title: Answer all of your RFPs really fast with the RFP Monster
author: Marshall Krassenstein
date: '2023-09-01'
slug: rfp-monster
categories: []
tags: [python, llm, machine-learning, slackbot, streamlit]
subtitle: ''
summary: 'An app I built to automate answering your RFPs with Langchain and FAISS'
authors: [Marshall Krassenstein]
lastmod: '2023-09-29T13:33:09-04:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---

### üö® Advance Warning üö®
I neither have code nor a cute app app for you to play with on this post! I did build an app, I just don't think my company will let me share it right now. Instead you get a blog post and a couple of Youtube videos. I talk like the üç™ *cookie monster* üç™ in one of them though so give it a look if you'd like!

### Background

In our last company Hackathon, my team won second place where the reward was a bunch of pats on the back and a little bit of prize money. I could wax poetic about other hackathon's I've done but I'm proud enough of this one to write about it. It was the first time I led our team on everything from software development to the business presentation. Our project was called the RFP Monster and our project vision was this:

"**Win more deals** by enabling our **sales force** to answer lots of questions **better** and **faster**. That‚Äôs it."

### What is an RFP?

RFP stands for 'Request for Proposal'. They are questionnaires that companies send out to prospective vendors when they're considering buying software or a service. At a company that sells fairly sophisticated Machine Learning software, answering these is a not a trivial task. I've seen documents containing upwards of 200 questions (seriously) and answering them thoroughly requires knowledge of pretty much every part of our company. Besides the nitty gritty details of how it handles machine learning problems, there will be questions about our architecture, security, downtime, pricing, and more. They are annoying hoops jump through and involve a lot of people from different departments. I can't imagine who on the customer side has to read through all of these responses. Yet they are a necessary evil. Many prospects won't talk to you unless you fill them out.

### The Solution

The obvious answer to this problem for anyone familiar with Large Language Models (LLMs) and vector databases is to use RAG which stands for *Retrieval Augmented Generation*. The idea is that you take all of your relevant documentation, split them into chunks, and shove them into special type of database that can encode text data. Then for a given question, you encode it, retrieve the chunks of text from the database that are most similar to it, and shove the chunks in your prompt as context to help something like chatGPT generate an answer. With packages like langchain and local open source vector databases like FAISS, this was pretty easy to build. To make our answers a little more specialized, we loaded about 600 pages of our platform documentation, our security policies, and a few RFPs we had answered before.

This alone would not have placed us in the hackathon though. By this time, RAG was a familiar method in the company. To take it a step further, I wanted to figure out a way to interlink RAG answers with traditional machine learning. To do this, our team took an RFP with about 150 questions, generated 150 answers. And then hand labeled them as Correct or one of multiple classes of Incorrect, such as "Insufficient Knowledge Base" or "Hallucination". We then trained a classifier (we called this an audit model) on the labeled responses and used it to assign a confidence score for any answers generated by the RFP Monster. To take it a step further, we set up a configuration in our web app that would re-query the LLM in different ways if the confidence score was low enough. The diagram I made for this work is below:

![Diagram](./rfp-monster-diagram.png)

We had a couple other bells and whistles in there too, like a way to submit new question answer pairs to our vector database and a system to give feedback and retrain our audit model. 

### Post Hackathon

My company has marketed our project pretty heavily since we presented. They even made me take away the cookie monster stuff and make a more professional demo video of it. You can watch both and tell me which one you like better. 

RFP Monster (My Hackathon Video)
[![RFP Monster](./rfp-monster-video.jpg)](https://www.youtube.com/watch?v=a1UNpZVLsgA "My Hackathon RFP Monster")

GenAI and Predictive AI Demo (The professional looking one)
[![GenAI + Predictive AI](./rfp-audit-video.jpg)](https://www.youtube.com/watch?v=btsGOipo5Xo, "GenAI + Predictive AI")

